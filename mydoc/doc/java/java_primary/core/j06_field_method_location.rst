Java中各种类型（方法，静态方法，成员变量，局部变量等）的存放位置
===============================================================================


变量
-------------

基本数据类型是放在栈中还是放在堆中，这取决于基本类型声明的位置。

一：在方法中声明的变量，即使变量是局部变量，每当程序调用方法时，系统都会为该方法建立一个方法栈，其所在方法中声明的变量就放在方法栈中，当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因。 
在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。 

（1）当声明是基本类型的变量的时，其变量名及值（变量名及值是两个概念）是放在方法栈中 

（2）当声明的是引用变量时，所声明的变量（该变量实际上是在方法中存储的是内存地址值）是放在方法的栈中，该变量所指向的对象是放在堆类存中的。

二：在类中声明的变量是成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。 
同样在类中声明的变量即可是基本类型的变量 也可是引用类型的变量 

（1）当声明的是基本类型的变量其变量名及其值放在堆内存中的 

（2）引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。引用变量名和对应的对象仍然存储在相应的堆中.

总结： 

.. image:: ./images/field_location.png






final 修饰的变量 对存储方式有何影响
----------------------------------------

首先有一点你要明白，final关键字对于变量的存储区域是没有任何影响的。jvm规范中，类的静态变量存储在方法区，实例变量存储在堆区。也就是说static关键字才对变量的存储区域造成影响。

final关键字来修饰变量表明了该变量一旦赋值就无法更改。同时编译器必须保证该变量在使用前被初始化赋值。

例如你的

    static final int

c1这个变量，是一个静态变量，静态变量的初始化可以在静态块中进行。而非static变量，可以初始化块中和构造方法中进行。


如果你在这几个地方没有对final变量进行赋值，编译器便会报错。

问题：

::

        //直接声明常量，并为其赋值

        public static final  int a=5 ;

       

        //直接声明常量，并为其赋值

        public  final  int c=5 ;

           

     根据 百度百科 “常量池” 的介绍，通过上面的两种方式 声明常量，该常量会放入常量池中，


     那么 public final int c 还会放入堆内存吗？


     public static final int a  还会和普通 静态变量一样 放入方法区吗？


public final int c=5 ;这段代码里，c和5不要弄混淆了，c是这个类的一个实例变量，类会在 **实例化** 的时候将这个变量存储在堆区，无论是否有final关键字，它都是在堆区。但是5，是一个字面量，它会存放在常量池，无论你是否加上final关键字，5都会在常量池。这段代码你可以理解为，从常量池中取出5，赋给a。
就好比假设在一个方法中

.. code:: java

    public void test(){
            String s1 = "abc";
            String s2 = "abc";
    }

很明显，上面的s1==s2是成立的，因为他们都指向了常量池中的abc。但是s1和s2是分配在常量池里的吗？当然不是，他们是分配在方法栈的局部变量表中的两个不同变量，只是指向了一个地址而已。

-----

参考
-------

`【收藏】java中静态方法和非静态方法的存储`_

.. _`【收藏】java中静态方法和非静态方法的存储`: http://hupy.iteye.com/blog/796265

