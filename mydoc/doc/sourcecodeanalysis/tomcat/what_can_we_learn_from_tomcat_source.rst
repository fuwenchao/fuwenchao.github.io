从tomcat源码中我们可以学到什么？
============================================


软件工程师磨炼技艺的方式有许多，而读优秀项目的源码，是这些方式中学习其他人的经验和方法，快速进步的很重要一种方式。古人云：

    独学而无友，则必孤陋寡闻！

读优秀的源码，就如同和高手交谈，无形中有胜过若干书的感觉。在代码中，我们能看到高手对于软件的设计，代码的组织，变量和方法的方法的命名，甚至通过多个版本能观察到作者对于项目不同时期的思考，对问题的修订方式，或者注释中流露出的幽默！


前面的文章中，我们提到过一般项目调试环境的搭建(感兴趣的看这里：怎样调试Tomcat源码)。


环境搭好之后，一切就绪，剩下的就是深入源码了。我们今天来谈关于源代码的阅读。


以下是我个人对于源码阅读的一些体会，欢迎朋友们在文末留言交流！


首先，源码的阅读是以目的为导向的。不同的目的决定了阅读源码的方式的不同。

例如，为了解决某个使用某个框架中存在的问题，你可能会从问题的出发点，逐步深入到相关的类与方法，而在解决了问题之后，可能就不会有兴趣再把夫关的代码再读下去了。


而如果是以深入分析某个软件的原理这个点出发，则会对软件的各个部分都有兴趣，从而深入各个模块，分析实现。


还有些时候，是为了特定的目的，比如为了针对面试中可能遇到的源码问题，会看一下HashMap，ArrayList等JDK源码的实现。


就我个人而言，这几种情形也都遇到过。当时在使用Spring data jpa的时候，框架的某个特定版本，对于@Column这个注解，如果只指定了length，而没有指定对应的name，这个时候，生成的sql就会有问题。为了解决这个问题读过这部分相关的源码。


而之前由于从事应用服务器的开发，所以需要了解应用服务器的运行原理，就需要深入下去，去读开源的应用服务器实现，像GlassFish/Jetty/Tomcat这些，当然，看的最多的还是Tomcat。


还有一次，在开发一个应用服务器监控应用的时候，为了通过MBean Server来获取对应服务器的监控数据，需要attach到相应的JVM上。我们的一个老的版本并没有提供对应的MBean Server的JMXURL，这个时候，观察到JConsole可以通过某个JVM进程，直接attach到这个进程上，并不需要url，为了学习和使用这种实现方式，从OpenJDK中把JConsole的源码找了出来。一读才发了解了，原来是JVM自带的attach机制，通过VirtualMachine连接上去。这JVM的进程，是通过指定的temp.dir中的pid文件来获取的，阅读源码后，让功能的实现更快速清楚。


以上是从阅读源码的不同目的来看源码的阅读，读源码的方式，到底要怎么读下去呢？


还是接着上面的目的来说，只关心某个类或实现方式，可以找特定范围内的内容进行阅读即可。而对于想深入了解某一类的软件的运行及实现原理时，就需要按功能主线进行入手，不能眉毛胡子一把抓。


例如读Tomcat的源码时，启动流程是一条线，部署流程是一条线，请求响应是另一条线。抓住一条线后，进行阅读，但此时不需要特别深入每一个细节，先把主要的点把握住之后，再深入一条线中的某个线段。例如启动的时候其实也会涉及到应用的部署，也会涉及到应用的类加载器，甚至是配置文件的解析，多个配置文件的merge等。

而请求响应时，又会涉及到参数的解析，对于不同请求后缀的响应处理，请求资源的初始化等。


点会有很多，在有了大致思路后，再深入各个点，最终各个点会相互促进理解，多个点连成一条线。


其次，源码的阅读，也是磨炼调试技巧的过程。在阅读源码的过程中，为了从某个功能点来深入一条线的流程，就需要各种加断点，debug，增加log，画图等，各种调试手段的综合使用，更能快速流畅的读源码。


最后，源码的文档、单测都是很好的下手材料。当拿到一堆代码不知道从何入手时，可以先看看文档，或者直接从单测入手。单测中以更细粒度的功能点组织，可以快速看到某个功能相关的类。


欢迎留言交流！


作为一个发展有十多年的，广为使用的成熟的应用容器，tomcat还是有很多值得学习的。我随便抛出一些技术点，

看看这些问题你是否思考过？

1. 如何让一个java程序成为一个类似于daemon这样的进程，在当前终端关闭后不退出，不同平台靠什么来解决这个问题？
2. 如何处理系统信号？
3. 如何做监控？是否使用jmx?
4. 应用是怎么部署的？servlet3有什么不同？
5. 多个应用之间是怎么相互隔离的？tomcat的classloader机制是怎样的？
6. servlet3和servlet3.1 新增的异步和非阻塞特性有什么用？
7. 怎么预防应用可能导致的内存泄露？
8. 关闭服务的时候，应该先暂停/关闭什么，后关闭什么？
9. tomcat的扩展机制是通过什么方式提供给开发者的？
10. BIO/NIO/APR 三种connector实现上的优劣是什么？
11. jsp文件是怎么编译和执行的？
12. HTTP协议本身就够喝一壶，tomcat7/8里支持的websocket/spdy等新特性本身就挺复杂的tomcat有四五十万行代码

你没有目的的去看会比较耗费精力，
最好先了解大致结构，和运行流程，结合自己想要在某个点的实际需求去深入了解。


实际上，做为一个成功且用户众多的开源项目，读源码可以学习到很多东西，学架构，学设计。学配置与监控等等。比如了解多线程应用怎么写，看看容器的子容器加载就明白不少。想了解classLoader，双亲委托，看看WebappClassloader，看看应用是如果加载类的就会豁然开朗。想学责任链设计模式，看看Filter是怎么解析执行的就掌握了。点有很多，重点在于你希望学到什么，带着你的目的学看，才会关注到你关注的东西。




参考:

https://mp.weixin.qq.com/s?__biz=MzI3MTEwODc5Ng==&mid=2650859158&idx=1&sn=ec9a703af3a7e3db4e412e5792fe214d#rd



----------------


Tomcat 已经不是“一段代码”了。先了解他的原理吧，

再从小做起。比如说 Tomcat，这样一步步来学习：


（1）Tomcat 是什么？HTTP 应用服务器。那么，先去看一下简单的 HTTP 服务器如何实现。网上有很多这样的小程序，它真的很小，一个很简单很简单的 HTTP 服务器，代码 100 - 200 行就足够。原理：创建Socket。根据请求 URL，映射到文件系统的某个路径，然后按照一定格式返回。

（2）这个简单的服务器，不支持并发，会造成资源浪费。那么学习下Java NIO机制（select/poll）。如果可以的话，顺便了解下 Linux 下的 epoll 机制、Windows 下的 IOCP 机制。这些都是异步通讯的一些基础知识。

（3）Cookie、Session、Request、ResponseTomcat 通过一个 Hash 表来维护 Session，Hash Key 是 Cookie 中 JSESSIONID 这个字段。明白这个道理后，自己就可以简单的实现这个部分。Request、Response 的构造和传递，从AprConnector、Catalina Engine、Context、Filter、再 Dispatch 到对应的 Servlet。理清结构，才容易看懂代码。

（4）然后，再次基础上，支持动态解析。Tomcat 是一个 Java 应用服务器，可以将 Servlet Class 的执行结果返回给客户端。那么如果去动态映射请求呢？Tomcat 是用 web.xml，检查 URL Pattern 来实现。比如 *.jsp 全部映射到 JspServlet 去执行。

（5）高级特性比如配置文件、AJP协议、Tomcat集群原理，Sticky Session机制，Session 持久化，连接池，JNDI，SSO 等等。这些相对来说比较独立。没关系，先搞清楚原理，再研究代码，会容易很多。先说这么多吧。这是个庞大的工程，先打好理论基础，再阅读代码。加油。


-------------


作者：知乎用户
链接：https://www.zhihu.com/question/20544801/answer/19580533
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

“阅读高质量的代码当然是学习编程的一个很重要的途径”发现，很多程序员把阅读代码这件事“神圣化”了，不是说阅读代码不重要，而是阅读代码在“追求神乎奇技的程式设计之道”上，不是核心出发点。之所以这样说，因为，发现一些如下所述的想阅读代码的人：

1. 连操作系统页面替换算法有哪些都说上不上人，就问如何阅读 Linux 源码。

2. 不完整学习前端知识(html, css,javascript)的人的，想阅读 webkit和v8 的源码。

3. 连<unix网络编程> 都没看过的人，想去阅读 tomcat 或者 glassfish 的代码。... 

类似这种的人，实在太多了，连原理都不了解的人，你阅读什么代码？装13？

所以，说到“阅读源代码”这事，
政治方向不能错：

1. 学习编程，语言语法和语言库层面的门槛，从业者很容易跨过去。但是优雅优秀地设计，编码去实现相关的产品需要经验，需要不断学习，需要不断偿试。

2. 对于特定的源码，得明白，代码只是产品，描述的是特定的问题领域，背后是相应的原理，思想。学习相关领域之后，了解到这个领域中，有哪些问题，有哪些解决方案，有哪些产品，这些产品各有什么特点，这些产品中，有哪些是开源的？整体的设计思路是什么？这些问题在阅读源码之前都应该回答！

3. 在这样的前提下，才能说能通过阅读代码来学习提高。你了解了这份源码要实现的功能，了解这份源码产品的特点。作为想阅读代码的你，你肯定会有你自己相应的设计实现。这样，通过对比自己的想法不断和源码印证。这样才有收获。所以，在宏观上，上面已经回答了问题。

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

阅读高质量的代码当然是学习编程的一个很重要的途径，但循序渐进是很重要的，

作为菜鸟，究竟应该先找一些小型的开源项目进行全局性的阅读，还是先找些大型的软件并选择其中的某一功能模块进行阅读分析（其实大型小型的区分界限我也不是很清楚，难道就是代码量的多寡） ？如何选择，看你的感兴趣的方向。像Linux内核又应该在什么水平阅读效果最好？嘿嘿... 

操作系统你掌握有多深了？有多少个细分领域？进程，线程，内存管理等等相关的论文看了哪些？(PS: 为什么要阅读 Linux 内核代码？为什么！！！无论从时间经济效益或者能力上来说，有必要么？)因为貌似除了Linux内核有很多相关的代码解析方面的书籍，其他开源软件很少，所以请推荐你所赞成的软件项目阅读次序以及关于代码阅读的心得经验（因为我是信息安全专业的学生，所以最好是相关开源软件吧）“信息安全专业”也是一个很大的方向。你对这个领域内哪些问题感兴趣？若深入了解这领域，你就不会问这样的问题。

------------


作者：Dion
链接：https://www.zhihu.com/question/20054992/answer/13822449
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

Tomcat 已经不是“一段代码”了。先了解他的原理吧，再从小做起。

比如说 Tomcat，这样一步步来学习：

（1）Tomcat 是什么？HTTP 应用服务器。那么，先去看一下简单的 HTTP 服务器如何实现。网上有很多这样的小程序，它真的很小，一个很简单很简单的 HTTP 服务器，代码 100 - 200 行就足够。原理：创建Socket。根据请求 URL，映射到文件系统的某个路径，然后按照一定格式返回。

（2）这个简单的服务器，不支持并发，会造成资源浪费。那么学习下Java NIO机制（select/poll）。如果可以的话，顺便了解下 Linux 下的 epoll 机制、Windows 下的 IOCP 机制。这些都是异步通讯的一些基础知识。

（3）Cookie、Session、Request、ResponseTomcat 通过一个 Hash 表来维护 Session，Hash Key 是 Cookie 中 JSESSIONID 这个字段。明白这个道理后，自己就可以简单的实现这个部分。Request、Response 的构造和传递，从AprConnector、Catalina Engine、Context、Filter、再 Dispatch 到对应的 Servlet。理清结构，才容易看懂代码。

（4）然后，再次基础上，支持动态解析。Tomcat 是一个 Java 应用服务器，可以将 Servlet Class 的执行结果返回给客户端。那么如果去动态映射请求呢？Tomcat 是用 web.xml，检查 URL Pattern 来实现。比如 *.jsp 全部映射到 JspServlet 去执行。

（5）高级特性比如配置文件、AJP协议、Tomcat集群原理，Sticky Session机制，Session 持久化，连接池，JNDI，SSO 等等。这些相对来说比较独立。没关系，先搞清楚原理，再研究代码，会容易很多。先说这么多吧。这是个庞大的工程，先打好理论基础，再阅读代码。加油。


参考:

https://www.zhihu.com/question/35002903 你见过代码写的最优美的java框架是什么？

https://zhuanlan.zhihu.com/p/26386896 tomcat相关知识汇总

https://blog.csdn.net/yangzl2008/article/category/5791147 tomcat源码阅读系列



